<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.todayperfume.perfume.mapper.PerfumeMapper">
    <!-- ID로 단건 조회 -->
    <select id="findPerfumeById" parameterType="long" resultType="com.edu.todayperfume.perfume.dto.PerfumeDto">
        SELECT
        p.id,
        p.name,
        tn.name as topNote,
        mn.name as middleNote,
        bn.name as baseNote,
        p.weather,
        p.brand,
        p.price,
        TO_CHAR(p.price, 'FM999,999,999') as priceStr,
        p.gender,
        COALESCE(r.AVG_RATE, 0) AS avgReview,
        p.image
        FROM PERFUME p
        LEFT JOIN (
        SELECT perfumeId, AVG(rate) AS AVG_RATE
        FROM REVIEW
        GROUP BY perfumeId
        ) r ON p.ID = r.perfumeId
        LEFT JOIN NOTES tn ON p.TOPNOTE    = tn.ID
        LEFT JOIN NOTES mn ON p.MIDDLENOTE = mn.ID
        LEFT JOIN NOTES bn ON p.BASENOTE   = bn.ID
        WHERE p.ID = #{id}
    </select>
    <!-- 모든 향수 조회 (ID 내림차순) -->
    <select id="findPerfumeListByNoteOrderByCreatedAt" resultType="com.edu.todayperfume.perfume.dto.PerfumeDto">
        SELECT
        p.id,
        p.name,
        tn.name as topNote,
        mn.name as middleNote,
        bn.name as baseNote,
        p.weather,
        p.brand,
        p.price,
        TO_CHAR(p.price, 'FM999,999,999') as priceStr,
        p.gender,
        COALESCE(r.AVG_RATE, 0) AS avgReview,
        p.image
        FROM PERFUME p
        LEFT JOIN (
        SELECT perfumeId, AVG(rate) AS AVG_RATE
        FROM REVIEW
        GROUP BY perfumeId
        ) r ON p.ID = r.perfumeId
        LEFT JOIN NOTES tn ON p.TOPNOTE    = tn.ID
        LEFT JOIN NOTES mn ON p.MIDDLENOTE = mn.ID
        LEFT JOIN NOTES bn ON p.BASENOTE   = bn.ID
        <where>
            <!-- noteId가 0이 아니면 필터 추가 (tn, mn, bn 중 하나라도 일치) -->
            <if test="noteId != 0">
                AND (
                p.topNote    = ${noteId}
                OR p.middleNote = ${noteId}
                OR p.baseNote   = ${noteId}
                )
            </if>
        </where>
        ORDER BY p.ID DESC
    </select>
    <!-- 평점 평균 내림차순, ID 내림차순 전체 조회 -->
    <select id="findPerfumeListByNoteOrderByRating" resultType="com.edu.todayperfume.perfume.dto.PerfumeDto">
        SELECT
        p.id,
        p.name,
        tn.name as topNote,
        mn.name as middleNote,
        bn.name as baseNote,
        p.weather,
        p.brand,
        p.price,
        TO_CHAR(p.price, 'FM999,999,999') as priceStr,
        p.gender,
        COALESCE(r.AVG_RATE, 0) AS avgReview,
        p.image
        FROM PERFUME p
        LEFT JOIN (
        SELECT perfumeId, AVG(rate) AS AVG_RATE
        FROM REVIEW
        GROUP BY perfumeId
        ) r ON p.ID = r.perfumeId
        LEFT JOIN NOTES tn ON p.TOPNOTE    = tn.ID
        LEFT JOIN NOTES mn ON p.MIDDLENOTE = mn.ID
        LEFT JOIN NOTES bn ON p.BASENOTE   = bn.ID
        <where>
            <!-- noteId가 0이 아니면 필터 추가 (tn, mn, bn 중 하나라도 일치) -->
            <if test="noteId != 0">
                AND (
                p.topNote    = ${noteId}
                OR p.middleNote = ${noteId}
                OR p.baseNote   = ${noteId}
                )
            </if>
        </where>
        ORDER BY COALESCE(r.AVG_RATE, 0) DESC, p.ID DESC
    </select>

    <insert id="save">
        INSERT INTO PERFUME(name, topNote, middleNote, baseNote, weather, brand, price, gender, updater, createdAt, image)
        VALUES(
        #{perfume.name},
        ${perfume.topNote},
        ${perfume.middleNote},
        ${perfume.baseNote},
        #{perfume.weather},
        #{perfume.brand},
        ${perfume.price},
        #{perfume.gender},
        #{updater},
        SYSDATE,
        #{image})
    </insert>

    <update id="update" parameterType="com.edu.todayperfume.perfume.dto.PerfumeUpdateReqDto">
        UPDATE PERFUME
        SET name = #{perfume.name},
            brand = #{perfume.brand},
            price = #{perfume.price},
            gender = #{perfume.gender},
            weather = #{perfume.weather},
            topNote = #{perfume.topNote},
            middleNote = #{perfume.middleNote},
            baseNote = #{perfume.baseNote}
            <if test="image != null">
                , image = #{image}
            </if>
        WHERE id = #{id}
    </update>

    <delete id="delete">
        DELETE FROM PERFUME WHERE id = ${id}
    </delete>

    <select id="recommend" resultType="com.edu.todayperfume.perfume.dto.PerfumeDto">
        SELECT
        p.id,
        p.name,
        tn.name as topNote,
        mn.name as middleNote,
        bn.name as baseNote,
        p.weather,
        p.brand,
        p.price,
        TO_CHAR(p.price, 'FM999,999,999') as priceStr,
        p.gender,
        COALESCE(r.AVG_RATE, 0) AS avgReview,
        p.image
        FROM PERFUME p
        LEFT JOIN (
        SELECT perfumeId, AVG(rate) AS AVG_RATE
        FROM REVIEW
        GROUP BY perfumeId
        ) r ON p.ID = r.perfumeId
        LEFT JOIN NOTES tn ON p.TOPNOTE    = tn.ID
        LEFT JOIN NOTES mn ON p.MIDDLENOTE = mn.ID
        LEFT JOIN NOTES bn ON p.BASENOTE   = bn.ID
        <where>
            <!-- 예: req 로 필터링이 필요하면 이렇게 -->
            <if test="req.weather != null">
                AND p.weather = #{req.weather}
            </if>

            <!-- noteList 가 비어있지 않을 때만 IN 절 추가 -->
            <if test="noteList != null and noteList.size() &gt; 0">
                AND (
                p.topNote    IN
                <foreach collection="noteList" item="note" open="(" separator="," close=")">
                    #{note.id}
                </foreach>
                OR p.middleNote IN
                <foreach collection="noteList" item="note" open="(" separator="," close=")">
                    #{note.id}
                </foreach>
                OR p.baseNote   IN
                <foreach collection="noteList" item="note" open="(" separator="," close=")">
                    #{note.id}
                </foreach>
                )
            </if>
            AND r.AVG_RATE >= 2
        </where>
    </select>

    <select id="findPerfumeRankInfo" resultType="com.edu.todayperfume.perfume.dto.PerfumeRankDto">
        <![CDATA[
    WITH filtered AS (
      SELECT
        CASE
            WHEN U.gender LIKE 'MAN' THEN '남자'
            WHEN U.gender LIKE 'WOMAN' THEN '여자'
        END AS gender,
        CASE
          WHEN U.age BETWEEN 20 AND 29 THEN '20대'
          WHEN U.age BETWEEN 30 AND 39 THEN '30대'
          WHEN U.age BETWEEN 40 AND 49 THEN '40대'
        END AS ageGroup,
        R.perfumeId,
        P.name AS perfumeName,
        R.rate
      FROM Review R
      JOIN Users U ON R.writer = U.id
      JOIN Perfume P ON R.perfumeId = P.id
      WHERE R.rate >= 3.5
        AND U.age BETWEEN 20 AND 49
        AND U.gender IN ('MAN','WOMAN')
    ),
    agg AS (
      SELECT
        gender,
        ageGroup,
        perfumeId,
        perfumeName,
        COUNT(*)           AS reviewCnt,
        ROUND(AVG(rate),2) AS avgRate
      FROM filtered
      GROUP BY gender, ageGroup, perfumeId, perfumeName
    ),
    ranked AS (
      SELECT
        gender,
        ageGroup,
        perfumeId,
        perfumeName,
        reviewCnt,
        avgRate,
        ROW_NUMBER() OVER (
          PARTITION BY gender, ageGroup
          ORDER BY reviewCnt DESC, avgRate DESC
        ) AS rn
      FROM agg
    )
    SELECT
      gender,
      ageGroup,
      perfumeId,
      perfumeName,
      reviewCnt,
      avgRate
    FROM ranked
    WHERE rn <= 5
    ORDER BY gender, ageGroup, rn
  ]]>
    </select>
</mapper>